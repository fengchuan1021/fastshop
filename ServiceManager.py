
#dont modify this file,it is autogenerated.for IDE vscode's type hint. list all Service with annotations
# no bad affect on efficiency,will be ignored by python runtime
from Service.base import CRUDBase
import os
import Models
import settings
import importlib

from typing import Any,TypeVar
from Models import Base
ModelType = TypeVar("ModelType", bound=Base)
class ServiceManager:
    def __getattr__(self,name:str)->Any:
        if os.path.exists(os.path.join(settings.BASE_DIR,'Service',f'{name}.py')):
            tmpclass=getattr(importlib.import_module(f"Service.{name}"),name)
            tmpinstance=tmpclass(getattr(Models, name.replace('Service', '')))
            setattr(self, name,tmpinstance)
            return tmpinstance
        if hasattr(Models,name.replace('Service','')):
            model=getattr(Models, name.replace('Service', ''))
            tmpinstance= CRUDBase(model)
            setattr(self, name, tmpinstance)
            return tmpinstance
        raise Exception(f'not found {name}')

    #those are for IDE's type hinting purpose.
    UserService : Service.UserService



Service=ServiceManager()