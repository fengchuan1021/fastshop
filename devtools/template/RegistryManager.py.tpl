
#dont modify this file,it is autogenerated.for IDE vscode's type hint list all Registry with annotations
# no bad affect on efficiency,will be ignored by python runtime
from Registries.base import CRUDBase
import os
import Models
import settings
import importlib
import Registries
from typing import Any,TypeVar
from Models import Base
ModelType = TypeVar("ModelType", bound=Base)
class RegistryManager:
    def __getattr__(self,name:str)->Any:
        if os.path.exists(os.path.join(settings.BASE_DIR,'Registries',f'{name}.py')):
            tmpclass=getattr(importlib.import_module(f"Registries.{name}"),name)
            tmpinstance=tmpclass(getattr(Models, name.replace('Registry', '')))
            setattr(self, name,tmpinstance)
            return tmpinstance
        if hasattr(Models,name.replace('Registry','')):
            model=getattr(Models, name.replace('Registry', ''))
            tmpinstance= CRUDBase(model)
            setattr(self, name, tmpinstance)
            return tmpinstance
        raise Exception(f'not found {name}')

    #those are for IDE's type hinting purpose.
    {annotations}


Registry=RegistryManager()