# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main
- dev
resources:
- repo: self

variables:
  BRANCH_NAME: $[upper(replace(variables['Build.SourceBranch'], 'refs/heads/', ''))]
  REBUIDFLGA: false

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'eb779d0e-ca11-41b8-bff4-63517a93f17c'
  baseimageRepository: 'xtpythonbase'
  imageRepository: 'xtpython'
  containerRegistry: 'xtmagento.azurecr.io'
  basedockerfilePath: '**/Dockerfilebase'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'xtmagento80ab-auth'


  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- powershell: |
    $files=$(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion))
    For ($i=0;$i -lt $files.length;$i++)
    {
      $name=$temp[$i]
      if ($name -like 'requirements/*')
      {
        Write-Host "##vso[task.setvariable variable=REBUIDFLGA]true"
      }
    }
- stage: Buildbaseimg
  condition: eq(variables.REBUIDFLGA, true)
  displayName: Buildbaseimg
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build
      inputs:
        command: build
        dockerfile: $(basedockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(baseimageRepository)
        tags: |
          $(tag)
        ${{ if eq(upper(replace(variables['Build.SourceBranch'], 'refs/heads/', '')), 'DEV') }}:
          arguments: --build-arg MODE="STAGE"
        ${{ else }}:
          arguments: --build-arg MODE="MAIN"

    - task: Docker@2
      displayName: Push image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(baseimageRepository)
        command: push
        tags: |
          last,$(tag)
          


- stage: Build
  condition: always()
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Login to registry
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection) # variable with Service Connection name
    - task: Bash@3
      displayName: Pulling docker image
      inputs:
        targetType: inline
        # docker_registry_name - name of the private repository
        script: |
          docker pull $(containerRegistry)/$(baseimageRepository):last
    - task: Docker@2
      displayName: Build
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        tags: |
          $(tag)
        ${{ if eq(upper(replace(variables['Build.SourceBranch'], 'refs/heads/', '')), 'DEV') }}:
          arguments: --build-arg MODE="STAGE"
        ${{ else }}:
          arguments: --build-arg MODE="MAIN"

    - task: Docker@2
      displayName: Push image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: push
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/k8s'
        artifact: 'manifests'
        publishLocation: 'pipeline'


- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'XTpython.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              #kubernetesServiceConnection: $(k8sname)
              manifests: |
                $(Pipeline.Workspace)/manifests/app-$(BRANCH_NAME)-deployment.yml
                $(Pipeline.Workspace)/manifests/celery-$(BRANCH_NAME)-deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

