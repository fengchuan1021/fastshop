# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main
- stage
resources:
- repo: self

variables:
  BRANCH_NAME: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'd1855d60-1904-4f63-9ccf-bbcb323dea58'
  imageRepository: 'tmapi'
  containerRegistry: 'fengchuandevcontainer.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'fengchuandevcontainer2e75-auth'

  ${{ if eq(variables.BRANCH_NAME, 'stage') }}:
    k8sname: akstage
  ${{ elseif eq(variables.BRANCH_NAME, 'main') }}:
    k8sname: myAKSCluster

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        tags: |
          $(tag)
        arguments: --build-arg BRANCH_NAME=$(BRANCH_NAME)
    - task: Docker@2
      displayName: Push image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: push
        tags: |
          $(tag)
    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    ${{ if eq(variables.BRANCH_NAME, 'stage') }}:
      environment: 'tmapi.asktage'
    ${{ else eq(variables.BRANCH_NAME, 'main') }}:
      environment: 'tmapi.mydevaks'

    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              #kubernetesServiceConnection: $(k8sname)
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

